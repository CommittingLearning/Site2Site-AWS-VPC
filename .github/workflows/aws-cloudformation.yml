name: AWS Cloudformation CI/CD Pipeline

# Only run on pull requests (for code validation and testing)
# and on pushes to development and production (for full deployment)
on:
  pull_request:
    branches:
      - development
      - production
      - testing
  push:
    branches:
      - development
      - production

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  validate-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-west-2

      # Pre-deployment checks: CloudFormation template validation and plan
      - name: Validate Cloudformation Template
        run: |
          aws cloudformation validate-template --template-body file://template.yaml

      # Install Homebrew and CloudFormation Guard
      - name: CloudFormation Guard
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh
          export PATH=~/.guard/bin:$PATH

      # Verify CloudFormation Guard installation
      - name: Verify CloudFormation Guard Installation
        run: |
          cfn-guard --version

      # Security testing with CloudFormation Guard
      - name: Run CloudFormation Guard
        run: |
          cfn-guard validate --rules rules.guard --template template.yaml

      # Skip applying changes in pull requests
      - name: Skip Apply in Pull Requests
        if: github.event_name == 'pull_request'
        run: |
          echo "Skipping apply since this is a pull request validation."
          exit 0

  deploy:
    needs: validate-and-test
    runs-on: ubuntu-latest
    # Runs only on push events
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-west-2

      # Set environment variable based on branch
      - name: Set environment variable based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=default" >> $GITHUB_ENV
          fi

      # Pause and wait for manual approval
      - name: Manual Approval before Apply
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.github_TOKEN }}
          approvers: CommittingLearning
          issue-title: "Deploying Cloudformation stack to provision services in the ${{ env.ENVIRONMENT }} environment"
          issue-body: "Please approve or deny the deployment"

      # Apply changes after approval
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file template.yaml \
            --parameter-overrides Environment=${{ env.ENVIRONMENT }} \
            --stack-name VPC-Stack-${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM

        # Unit & integration tests using AWS CLI
      - name: Run AWS CLI Tests
        run: |
          aws cloudformation describe-stacks --stack-name VPC-Stack-${{ env.ENVIRONMENT }}

      # Wait for 15 mins and destroy resources
      - name: Wait for demonstration period
        run: sleep 900

      # Destroy resources to avoid unnecessary costs
      - name: Delete CloudFormation Stack
        run: |
          aws cloudformation delete-stack --stack-name VPC-Stack-${{ env.ENVIRONMENT }}
          aws cloudformation wait stack-delete-complete --stack-name VPC-Stack-${{ env.ENVIRONMENT }}